# coding: utf-8

"""
    Nozomi API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ItemApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def item_all_index_get(self, index, parent_guid_filter, slug_filter, name_filter, **kwargs):  # noqa: E501
        """Obtains all of the relevant items you own.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_all_index_get(index, parent_guid_filter, slug_filter, name_filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int index: The 'page' of the list of results of every x items. (required)
        :param str parent_guid_filter: Filters items by Parent ID. (required)
        :param str slug_filter: Filters items by slug. (required)
        :param str name_filter: Filters items by name. (required)
        :return: ItemViewModelIEnumerablePaginatedViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.item_all_index_get_with_http_info(index, parent_guid_filter, slug_filter, name_filter, **kwargs)  # noqa: E501
        else:
            (data) = self.item_all_index_get_with_http_info(index, parent_guid_filter, slug_filter, name_filter, **kwargs)  # noqa: E501
            return data

    def item_all_index_get_with_http_info(self, index, parent_guid_filter, slug_filter, name_filter, **kwargs):  # noqa: E501
        """Obtains all of the relevant items you own.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_all_index_get_with_http_info(index, parent_guid_filter, slug_filter, name_filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int index: The 'page' of the list of results of every x items. (required)
        :param str parent_guid_filter: Filters items by Parent ID. (required)
        :param str slug_filter: Filters items by slug. (required)
        :param str name_filter: Filters items by name. (required)
        :return: ItemViewModelIEnumerablePaginatedViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index', 'parent_guid_filter', 'slug_filter', 'name_filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method item_all_index_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `item_all_index_get`")  # noqa: E501
        # verify the required parameter 'parent_guid_filter' is set
        if ('parent_guid_filter' not in params or
                params['parent_guid_filter'] is None):
            raise ValueError("Missing the required parameter `parent_guid_filter` when calling `item_all_index_get`")  # noqa: E501
        # verify the required parameter 'slug_filter' is set
        if ('slug_filter' not in params or
                params['slug_filter'] is None):
            raise ValueError("Missing the required parameter `slug_filter` when calling `item_all_index_get`")  # noqa: E501
        # verify the required parameter 'name_filter' is set
        if ('name_filter' not in params or
                params['name_filter'] is None):
            raise ValueError("Missing the required parameter `name_filter` when calling `item_all_index_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501
        if 'parent_guid_filter' in params:
            path_params['parentGuidFilter'] = params['parent_guid_filter']  # noqa: E501
        if 'slug_filter' in params:
            path_params['slugFilter'] = params['slug_filter']  # noqa: E501
        if 'name_filter' in params:
            path_params['nameFilter'] = params['name_filter']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key']  # noqa: E501

        return self.api_client.call_api(
            '/Item/All/{index}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemViewModelIEnumerablePaginatedViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def item_create_post(self, **kwargs):  # noqa: E501
        """Create an item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_create_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateItemInputModel body: The supposed properties/parameters of the item.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.item_create_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.item_create_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def item_create_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create an item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_create_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateItemInputModel body: The supposed properties/parameters of the item.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method item_create_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key']  # noqa: E501

        return self.api_client.call_api(
            '/Item/Create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def item_exists_slug_get(self, slug, **kwargs):  # noqa: E501
        """Validates if the slug is being used.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_exists_slug_get(slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str slug: The unique identifier of the item. (required)
        :param bool local: If you want to only check the slugs you own.
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.item_exists_slug_get_with_http_info(slug, **kwargs)  # noqa: E501
        else:
            (data) = self.item_exists_slug_get_with_http_info(slug, **kwargs)  # noqa: E501
            return data

    def item_exists_slug_get_with_http_info(self, slug, **kwargs):  # noqa: E501
        """Validates if the slug is being used.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_exists_slug_get_with_http_info(slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str slug: The unique identifier of the item. (required)
        :param bool local: If you want to only check the slugs you own.
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['slug', 'local']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method item_exists_slug_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'slug' is set
        if ('slug' not in params or
                params['slug'] is None):
            raise ValueError("Missing the required parameter `slug` when calling `item_exists_slug_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'slug' in params:
            path_params['slug'] = params['slug']  # noqa: E501

        query_params = []
        if 'local' in params:
            query_params.append(('local', params['local']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key']  # noqa: E501

        return self.api_client.call_api(
            '/Item/Exists/{slug}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def item_get_by_slug_slug_get(self, slug, **kwargs):  # noqa: E501
        """Obtains the specified item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_get_by_slug_slug_get(slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str slug: The unique slug of the item. (required)
        :return: ItemViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.item_get_by_slug_slug_get_with_http_info(slug, **kwargs)  # noqa: E501
        else:
            (data) = self.item_get_by_slug_slug_get_with_http_info(slug, **kwargs)  # noqa: E501
            return data

    def item_get_by_slug_slug_get_with_http_info(self, slug, **kwargs):  # noqa: E501
        """Obtains the specified item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_get_by_slug_slug_get_with_http_info(slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str slug: The unique slug of the item. (required)
        :return: ItemViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['slug']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method item_get_by_slug_slug_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'slug' is set
        if ('slug' not in params or
                params['slug'] is None):
            raise ValueError("Missing the required parameter `slug` when calling `item_get_by_slug_slug_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'slug' in params:
            path_params['slug'] = params['slug']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key']  # noqa: E501

        return self.api_client.call_api(
            '/Item/GetBySlug/{slug}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def item_get_item_guid_get(self, item_guid, **kwargs):  # noqa: E501
        """Obtains the specified item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_get_item_guid_get(item_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_guid: The unique identifier of the item. (required)
        :return: ItemViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.item_get_item_guid_get_with_http_info(item_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.item_get_item_guid_get_with_http_info(item_guid, **kwargs)  # noqa: E501
            return data

    def item_get_item_guid_get_with_http_info(self, item_guid, **kwargs):  # noqa: E501
        """Obtains the specified item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_get_item_guid_get_with_http_info(item_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_guid: The unique identifier of the item. (required)
        :return: ItemViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method item_get_item_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_guid' is set
        if ('item_guid' not in params or
                params['item_guid'] is None):
            raise ValueError("Missing the required parameter `item_guid` when calling `item_get_item_guid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_guid' in params:
            path_params['itemGuid'] = params['item_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key']  # noqa: E501

        return self.api_client.call_api(
            '/Item/Get/{itemGuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def item_update_put(self, **kwargs):  # noqa: E501
        """Update the specified item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_update_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateItemInputModel body: The supposed properties/parameters the value you want to update on an item.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.item_update_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.item_update_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def item_update_put_with_http_info(self, **kwargs):  # noqa: E501
        """Update the specified item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_update_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateItemInputModel body: The supposed properties/parameters the value you want to update on an item.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method item_update_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API Key']  # noqa: E501

        return self.api_client.call_api(
            '/Item/Update', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
