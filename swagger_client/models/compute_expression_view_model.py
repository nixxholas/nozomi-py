# coding: utf-8

"""
    Nozomi API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComputeExpressionViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'type': 'ComputeExpressionType',
        'expression': 'str',
        'value': 'str',
        'compute_guid': 'str',
        'compute': 'ComputeViewModel',
        'is_enabled': 'bool'
    }

    attribute_map = {
        'guid': 'guid',
        'type': 'type',
        'expression': 'expression',
        'value': 'value',
        'compute_guid': 'computeGuid',
        'compute': 'compute',
        'is_enabled': 'isEnabled'
    }

    def __init__(self, guid=None, type=None, expression=None, value=None, compute_guid=None, compute=None, is_enabled=None):  # noqa: E501
        """ComputeExpressionViewModel - a model defined in Swagger"""  # noqa: E501
        self._guid = None
        self._type = None
        self._expression = None
        self._value = None
        self._compute_guid = None
        self._compute = None
        self._is_enabled = None
        self.discriminator = None
        if guid is not None:
            self.guid = guid
        if type is not None:
            self.type = type
        if expression is not None:
            self.expression = expression
        if value is not None:
            self.value = value
        if compute_guid is not None:
            self.compute_guid = compute_guid
        if compute is not None:
            self.compute = compute
        if is_enabled is not None:
            self.is_enabled = is_enabled

    @property
    def guid(self):
        """Gets the guid of this ComputeExpressionViewModel.  # noqa: E501


        :return: The guid of this ComputeExpressionViewModel.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this ComputeExpressionViewModel.


        :param guid: The guid of this ComputeExpressionViewModel.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def type(self):
        """Gets the type of this ComputeExpressionViewModel.  # noqa: E501


        :return: The type of this ComputeExpressionViewModel.  # noqa: E501
        :rtype: ComputeExpressionType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ComputeExpressionViewModel.


        :param type: The type of this ComputeExpressionViewModel.  # noqa: E501
        :type: ComputeExpressionType
        """

        self._type = type

    @property
    def expression(self):
        """Gets the expression of this ComputeExpressionViewModel.  # noqa: E501


        :return: The expression of this ComputeExpressionViewModel.  # noqa: E501
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this ComputeExpressionViewModel.


        :param expression: The expression of this ComputeExpressionViewModel.  # noqa: E501
        :type: str
        """

        self._expression = expression

    @property
    def value(self):
        """Gets the value of this ComputeExpressionViewModel.  # noqa: E501


        :return: The value of this ComputeExpressionViewModel.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ComputeExpressionViewModel.


        :param value: The value of this ComputeExpressionViewModel.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def compute_guid(self):
        """Gets the compute_guid of this ComputeExpressionViewModel.  # noqa: E501


        :return: The compute_guid of this ComputeExpressionViewModel.  # noqa: E501
        :rtype: str
        """
        return self._compute_guid

    @compute_guid.setter
    def compute_guid(self, compute_guid):
        """Sets the compute_guid of this ComputeExpressionViewModel.


        :param compute_guid: The compute_guid of this ComputeExpressionViewModel.  # noqa: E501
        :type: str
        """

        self._compute_guid = compute_guid

    @property
    def compute(self):
        """Gets the compute of this ComputeExpressionViewModel.  # noqa: E501


        :return: The compute of this ComputeExpressionViewModel.  # noqa: E501
        :rtype: ComputeViewModel
        """
        return self._compute

    @compute.setter
    def compute(self, compute):
        """Sets the compute of this ComputeExpressionViewModel.


        :param compute: The compute of this ComputeExpressionViewModel.  # noqa: E501
        :type: ComputeViewModel
        """

        self._compute = compute

    @property
    def is_enabled(self):
        """Gets the is_enabled of this ComputeExpressionViewModel.  # noqa: E501


        :return: The is_enabled of this ComputeExpressionViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this ComputeExpressionViewModel.


        :param is_enabled: The is_enabled of this ComputeExpressionViewModel.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComputeExpressionViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputeExpressionViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
