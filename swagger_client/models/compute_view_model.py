# coding: utf-8

"""
    Nozomi API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComputeViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'key': 'str',
        'formula': 'str',
        'delay': 'int',
        'fail_count': 'int',
        'is_enabled': 'bool',
        'expressions': 'list[ComputeExpressionViewModel]',
        'child_computes': 'list[SubComputeViewModel]',
        'parent_computes': 'list[SubComputeViewModel]',
        'values': 'list[ComputeValueViewModel]'
    }

    attribute_map = {
        'guid': 'guid',
        'key': 'key',
        'formula': 'formula',
        'delay': 'delay',
        'fail_count': 'failCount',
        'is_enabled': 'isEnabled',
        'expressions': 'expressions',
        'child_computes': 'childComputes',
        'parent_computes': 'parentComputes',
        'values': 'values'
    }

    def __init__(self, guid=None, key=None, formula=None, delay=None, fail_count=None, is_enabled=None, expressions=None, child_computes=None, parent_computes=None, values=None):  # noqa: E501
        """ComputeViewModel - a model defined in Swagger"""  # noqa: E501
        self._guid = None
        self._key = None
        self._formula = None
        self._delay = None
        self._fail_count = None
        self._is_enabled = None
        self._expressions = None
        self._child_computes = None
        self._parent_computes = None
        self._values = None
        self.discriminator = None
        if guid is not None:
            self.guid = guid
        if key is not None:
            self.key = key
        if formula is not None:
            self.formula = formula
        if delay is not None:
            self.delay = delay
        if fail_count is not None:
            self.fail_count = fail_count
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if expressions is not None:
            self.expressions = expressions
        if child_computes is not None:
            self.child_computes = child_computes
        if parent_computes is not None:
            self.parent_computes = parent_computes
        if values is not None:
            self.values = values

    @property
    def guid(self):
        """Gets the guid of this ComputeViewModel.  # noqa: E501


        :return: The guid of this ComputeViewModel.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this ComputeViewModel.


        :param guid: The guid of this ComputeViewModel.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def key(self):
        """Gets the key of this ComputeViewModel.  # noqa: E501


        :return: The key of this ComputeViewModel.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ComputeViewModel.


        :param key: The key of this ComputeViewModel.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def formula(self):
        """Gets the formula of this ComputeViewModel.  # noqa: E501


        :return: The formula of this ComputeViewModel.  # noqa: E501
        :rtype: str
        """
        return self._formula

    @formula.setter
    def formula(self, formula):
        """Sets the formula of this ComputeViewModel.


        :param formula: The formula of this ComputeViewModel.  # noqa: E501
        :type: str
        """

        self._formula = formula

    @property
    def delay(self):
        """Gets the delay of this ComputeViewModel.  # noqa: E501


        :return: The delay of this ComputeViewModel.  # noqa: E501
        :rtype: int
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this ComputeViewModel.


        :param delay: The delay of this ComputeViewModel.  # noqa: E501
        :type: int
        """

        self._delay = delay

    @property
    def fail_count(self):
        """Gets the fail_count of this ComputeViewModel.  # noqa: E501


        :return: The fail_count of this ComputeViewModel.  # noqa: E501
        :rtype: int
        """
        return self._fail_count

    @fail_count.setter
    def fail_count(self, fail_count):
        """Sets the fail_count of this ComputeViewModel.


        :param fail_count: The fail_count of this ComputeViewModel.  # noqa: E501
        :type: int
        """

        self._fail_count = fail_count

    @property
    def is_enabled(self):
        """Gets the is_enabled of this ComputeViewModel.  # noqa: E501


        :return: The is_enabled of this ComputeViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this ComputeViewModel.


        :param is_enabled: The is_enabled of this ComputeViewModel.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def expressions(self):
        """Gets the expressions of this ComputeViewModel.  # noqa: E501


        :return: The expressions of this ComputeViewModel.  # noqa: E501
        :rtype: list[ComputeExpressionViewModel]
        """
        return self._expressions

    @expressions.setter
    def expressions(self, expressions):
        """Sets the expressions of this ComputeViewModel.


        :param expressions: The expressions of this ComputeViewModel.  # noqa: E501
        :type: list[ComputeExpressionViewModel]
        """

        self._expressions = expressions

    @property
    def child_computes(self):
        """Gets the child_computes of this ComputeViewModel.  # noqa: E501


        :return: The child_computes of this ComputeViewModel.  # noqa: E501
        :rtype: list[SubComputeViewModel]
        """
        return self._child_computes

    @child_computes.setter
    def child_computes(self, child_computes):
        """Sets the child_computes of this ComputeViewModel.


        :param child_computes: The child_computes of this ComputeViewModel.  # noqa: E501
        :type: list[SubComputeViewModel]
        """

        self._child_computes = child_computes

    @property
    def parent_computes(self):
        """Gets the parent_computes of this ComputeViewModel.  # noqa: E501


        :return: The parent_computes of this ComputeViewModel.  # noqa: E501
        :rtype: list[SubComputeViewModel]
        """
        return self._parent_computes

    @parent_computes.setter
    def parent_computes(self, parent_computes):
        """Sets the parent_computes of this ComputeViewModel.


        :param parent_computes: The parent_computes of this ComputeViewModel.  # noqa: E501
        :type: list[SubComputeViewModel]
        """

        self._parent_computes = parent_computes

    @property
    def values(self):
        """Gets the values of this ComputeViewModel.  # noqa: E501


        :return: The values of this ComputeViewModel.  # noqa: E501
        :rtype: list[ComputeValueViewModel]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ComputeViewModel.


        :param values: The values of this ComputeViewModel.  # noqa: E501
        :type: list[ComputeValueViewModel]
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComputeViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputeViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
