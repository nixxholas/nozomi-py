# coding: utf-8

"""
    Nozomi API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateItemInputModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'logo_path': 'str',
        'abbreviation': 'str',
        'slug': 'str',
        'name': 'str',
        'denominations': 'int',
        'denomination_name': 'str',
        'parent_item_guid': 'str',
        'type_guids': 'list[str]',
        'properties': 'list[CreateItemPropertyInputModel]',
        'requests': 'list[CreateItemRequestInputModel]'
    }

    attribute_map = {
        'guid': 'guid',
        'logo_path': 'logoPath',
        'abbreviation': 'abbreviation',
        'slug': 'slug',
        'name': 'name',
        'denominations': 'denominations',
        'denomination_name': 'denominationName',
        'parent_item_guid': 'parentItemGuid',
        'type_guids': 'typeGuids',
        'properties': 'properties',
        'requests': 'requests'
    }

    def __init__(self, guid=None, logo_path=None, abbreviation=None, slug=None, name=None, denominations=None, denomination_name=None, parent_item_guid=None, type_guids=None, properties=None, requests=None):  # noqa: E501
        """CreateItemInputModel - a model defined in Swagger"""  # noqa: E501
        self._guid = None
        self._logo_path = None
        self._abbreviation = None
        self._slug = None
        self._name = None
        self._denominations = None
        self._denomination_name = None
        self._parent_item_guid = None
        self._type_guids = None
        self._properties = None
        self._requests = None
        self.discriminator = None
        if guid is not None:
            self.guid = guid
        if logo_path is not None:
            self.logo_path = logo_path
        if abbreviation is not None:
            self.abbreviation = abbreviation
        if slug is not None:
            self.slug = slug
        if name is not None:
            self.name = name
        if denominations is not None:
            self.denominations = denominations
        if denomination_name is not None:
            self.denomination_name = denomination_name
        if parent_item_guid is not None:
            self.parent_item_guid = parent_item_guid
        if type_guids is not None:
            self.type_guids = type_guids
        if properties is not None:
            self.properties = properties
        if requests is not None:
            self.requests = requests

    @property
    def guid(self):
        """Gets the guid of this CreateItemInputModel.  # noqa: E501


        :return: The guid of this CreateItemInputModel.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this CreateItemInputModel.


        :param guid: The guid of this CreateItemInputModel.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def logo_path(self):
        """Gets the logo_path of this CreateItemInputModel.  # noqa: E501


        :return: The logo_path of this CreateItemInputModel.  # noqa: E501
        :rtype: str
        """
        return self._logo_path

    @logo_path.setter
    def logo_path(self, logo_path):
        """Sets the logo_path of this CreateItemInputModel.


        :param logo_path: The logo_path of this CreateItemInputModel.  # noqa: E501
        :type: str
        """

        self._logo_path = logo_path

    @property
    def abbreviation(self):
        """Gets the abbreviation of this CreateItemInputModel.  # noqa: E501


        :return: The abbreviation of this CreateItemInputModel.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this CreateItemInputModel.


        :param abbreviation: The abbreviation of this CreateItemInputModel.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def slug(self):
        """Gets the slug of this CreateItemInputModel.  # noqa: E501


        :return: The slug of this CreateItemInputModel.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this CreateItemInputModel.


        :param slug: The slug of this CreateItemInputModel.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def name(self):
        """Gets the name of this CreateItemInputModel.  # noqa: E501


        :return: The name of this CreateItemInputModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateItemInputModel.


        :param name: The name of this CreateItemInputModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def denominations(self):
        """Gets the denominations of this CreateItemInputModel.  # noqa: E501


        :return: The denominations of this CreateItemInputModel.  # noqa: E501
        :rtype: int
        """
        return self._denominations

    @denominations.setter
    def denominations(self, denominations):
        """Sets the denominations of this CreateItemInputModel.


        :param denominations: The denominations of this CreateItemInputModel.  # noqa: E501
        :type: int
        """

        self._denominations = denominations

    @property
    def denomination_name(self):
        """Gets the denomination_name of this CreateItemInputModel.  # noqa: E501


        :return: The denomination_name of this CreateItemInputModel.  # noqa: E501
        :rtype: str
        """
        return self._denomination_name

    @denomination_name.setter
    def denomination_name(self, denomination_name):
        """Sets the denomination_name of this CreateItemInputModel.


        :param denomination_name: The denomination_name of this CreateItemInputModel.  # noqa: E501
        :type: str
        """

        self._denomination_name = denomination_name

    @property
    def parent_item_guid(self):
        """Gets the parent_item_guid of this CreateItemInputModel.  # noqa: E501


        :return: The parent_item_guid of this CreateItemInputModel.  # noqa: E501
        :rtype: str
        """
        return self._parent_item_guid

    @parent_item_guid.setter
    def parent_item_guid(self, parent_item_guid):
        """Sets the parent_item_guid of this CreateItemInputModel.


        :param parent_item_guid: The parent_item_guid of this CreateItemInputModel.  # noqa: E501
        :type: str
        """

        self._parent_item_guid = parent_item_guid

    @property
    def type_guids(self):
        """Gets the type_guids of this CreateItemInputModel.  # noqa: E501


        :return: The type_guids of this CreateItemInputModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._type_guids

    @type_guids.setter
    def type_guids(self, type_guids):
        """Sets the type_guids of this CreateItemInputModel.


        :param type_guids: The type_guids of this CreateItemInputModel.  # noqa: E501
        :type: list[str]
        """

        self._type_guids = type_guids

    @property
    def properties(self):
        """Gets the properties of this CreateItemInputModel.  # noqa: E501


        :return: The properties of this CreateItemInputModel.  # noqa: E501
        :rtype: list[CreateItemPropertyInputModel]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this CreateItemInputModel.


        :param properties: The properties of this CreateItemInputModel.  # noqa: E501
        :type: list[CreateItemPropertyInputModel]
        """

        self._properties = properties

    @property
    def requests(self):
        """Gets the requests of this CreateItemInputModel.  # noqa: E501


        :return: The requests of this CreateItemInputModel.  # noqa: E501
        :rtype: list[CreateItemRequestInputModel]
        """
        return self._requests

    @requests.setter
    def requests(self, requests):
        """Sets the requests of this CreateItemInputModel.


        :param requests: The requests of this CreateItemInputModel.  # noqa: E501
        :type: list[CreateItemRequestInputModel]
        """

        self._requests = requests

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateItemInputModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateItemInputModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
