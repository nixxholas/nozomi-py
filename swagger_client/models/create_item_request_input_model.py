# coding: utf-8

"""
    Nozomi API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateItemRequestInputModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'str',
        'request': 'RequestViewModel',
        'item_guid': 'str',
        'item': 'ItemViewModel'
    }

    attribute_map = {
        'request_id': 'requestId',
        'request': 'request',
        'item_guid': 'itemGuid',
        'item': 'item'
    }

    def __init__(self, request_id=None, request=None, item_guid=None, item=None):  # noqa: E501
        """CreateItemRequestInputModel - a model defined in Swagger"""  # noqa: E501
        self._request_id = None
        self._request = None
        self._item_guid = None
        self._item = None
        self.discriminator = None
        if request_id is not None:
            self.request_id = request_id
        if request is not None:
            self.request = request
        if item_guid is not None:
            self.item_guid = item_guid
        if item is not None:
            self.item = item

    @property
    def request_id(self):
        """Gets the request_id of this CreateItemRequestInputModel.  # noqa: E501


        :return: The request_id of this CreateItemRequestInputModel.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this CreateItemRequestInputModel.


        :param request_id: The request_id of this CreateItemRequestInputModel.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def request(self):
        """Gets the request of this CreateItemRequestInputModel.  # noqa: E501


        :return: The request of this CreateItemRequestInputModel.  # noqa: E501
        :rtype: RequestViewModel
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this CreateItemRequestInputModel.


        :param request: The request of this CreateItemRequestInputModel.  # noqa: E501
        :type: RequestViewModel
        """

        self._request = request

    @property
    def item_guid(self):
        """Gets the item_guid of this CreateItemRequestInputModel.  # noqa: E501


        :return: The item_guid of this CreateItemRequestInputModel.  # noqa: E501
        :rtype: str
        """
        return self._item_guid

    @item_guid.setter
    def item_guid(self, item_guid):
        """Sets the item_guid of this CreateItemRequestInputModel.


        :param item_guid: The item_guid of this CreateItemRequestInputModel.  # noqa: E501
        :type: str
        """

        self._item_guid = item_guid

    @property
    def item(self):
        """Gets the item of this CreateItemRequestInputModel.  # noqa: E501


        :return: The item of this CreateItemRequestInputModel.  # noqa: E501
        :rtype: ItemViewModel
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this CreateItemRequestInputModel.


        :param item: The item of this CreateItemRequestInputModel.  # noqa: E501
        :type: ItemViewModel
        """

        self._item = item

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateItemRequestInputModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateItemRequestInputModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
