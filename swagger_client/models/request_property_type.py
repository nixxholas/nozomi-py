# coding: utf-8

"""
    Nozomi API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestPropertyType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    HTTPHEADER = "HttpHeader"
    HTTPHEADER_ACCEPT = "HttpHeader_Accept"
    HTTPHEADER_ACCEPTCHARSET = "HttpHeader_AcceptCharset"
    HTTPHEADER_ACCEPTENCODING = "HttpHeader_AcceptEncoding"
    HTTPHEADER_ACCEPTLANGUAGE = "HttpHeader_AcceptLanguage"
    HTTPHEADER_AUTHORIZATION = "HttpHeader_Authorization"
    HTTPHEADER_CACHECONTROL = "HttpHeader_CacheControl"
    HTTPHEADER_CONNECTION = "HttpHeader_Connection"
    HTTPHEADER_CONNECTIONCLOSE = "HttpHeader_ConnectionClose"
    HTTPHEADER_DATE = "HttpHeader_Date"
    HTTPHEADER_EXPECT = "HttpHeader_Expect"
    HTTPHEADER_EXPECTCONTINUE = "HttpHeader_ExpectContinue"
    HTTPHEADER_FROM = "HttpHeader_From"
    HTTPHEADER_HOST = "HttpHeader_Host"
    HTTPHEADER_IFMATCH = "HttpHeader_IfMatch"
    HTTPHEADER_IFMODIFIEDSINCE = "HttpHeader_IfModifiedSince"
    HTTPHEADER_IFNONEMATCH = "HttpHeader_IfNoneMatch"
    HTTPHEADER_IFRANGE = "HttpHeader_IfRange"
    HTTPHEADER_IFUNMODIFIEDSINCE = "HttpHeader_IfUnmodifiedSince"
    HTTPHEADER_MAXFORWARDS = "HttpHeader_MaxForwards"
    HTTPHEADER_PRAGMA = "HttpHeader_Pragma"
    HTTPHEADER_PROXYAUTHORIZATION = "HttpHeader_ProxyAuthorization"
    HTTPHEADER_RANGE = "HttpHeader_Range"
    HTTPHEADER_REFERRER = "HttpHeader_Referrer"
    HTTPHEADER_TE = "HttpHeader_TE"
    HTTPHEADER_TRAILER = "HttpHeader_Trailer"
    HTTPHEADER_TRANSFERENCODING = "HttpHeader_TransferEncoding"
    HTTPHEADER_TRANSFERENCODINGCHUNKED = "HttpHeader_TransferEncodingChunked"
    HTTPHEADER_UPGRADE = "HttpHeader_Upgrade"
    HTTPHEADER_USERAGENT = "HttpHeader_UserAgent"
    HTTPHEADER_VIA = "HttpHeader_Via"
    HTTPHEADER_WARNING = "HttpHeader_Warning"
    HTTPHEADER_CUSTOM = "HttpHeader_Custom"
    HTTPHEADER_MEDIATYPE = "HttpHeader_MediaType"
    HTTPBODY = "HttpBody"
    HTTPQUERY = "HttpQuery"
    HTTPHEADER_BASICAUTHUSER = "HttpHeader_BasicAuthUser"
    HTTPHEADER_BASICAUTHPASSWORD = "HttpHeader_BasicAuthPassword"
    SOCKETSUBSCRIPTION = "SocketSubscription"
    SOCKETBODY = "SocketBody"
    INVALID = "Invalid"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """RequestPropertyType - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestPropertyType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestPropertyType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
