# coding: utf-8

"""
    Nozomi API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'request_type': 'int',
        'response_type': 'int',
        'endpoint': 'str',
        'name': 'str',
        'delay': 'int',
        'failure_delay': 'int',
        'is_enabled': 'bool',
        'components': 'list[ComponentViewModel]',
        'items': 'list[ItemRequestViewModel]',
        'properties': 'list[RequestPropertyViewModel]',
        'websocket_commands': 'list[WebsocketCommandViewModel]'
    }

    attribute_map = {
        'guid': 'guid',
        'request_type': 'requestType',
        'response_type': 'responseType',
        'endpoint': 'endpoint',
        'name': 'name',
        'delay': 'delay',
        'failure_delay': 'failureDelay',
        'is_enabled': 'isEnabled',
        'components': 'components',
        'items': 'items',
        'properties': 'properties',
        'websocket_commands': 'websocketCommands'
    }

    def __init__(self, guid=None, request_type=None, response_type=None, endpoint=None, name=None, delay=None, failure_delay=None, is_enabled=None, components=None, items=None, properties=None, websocket_commands=None):  # noqa: E501
        """RequestViewModel - a model defined in Swagger"""  # noqa: E501
        self._guid = None
        self._request_type = None
        self._response_type = None
        self._endpoint = None
        self._name = None
        self._delay = None
        self._failure_delay = None
        self._is_enabled = None
        self._components = None
        self._items = None
        self._properties = None
        self._websocket_commands = None
        self.discriminator = None
        if guid is not None:
            self.guid = guid
        if request_type is not None:
            self.request_type = request_type
        if response_type is not None:
            self.response_type = response_type
        if endpoint is not None:
            self.endpoint = endpoint
        if name is not None:
            self.name = name
        if delay is not None:
            self.delay = delay
        if failure_delay is not None:
            self.failure_delay = failure_delay
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if components is not None:
            self.components = components
        if items is not None:
            self.items = items
        if properties is not None:
            self.properties = properties
        if websocket_commands is not None:
            self.websocket_commands = websocket_commands

    @property
    def guid(self):
        """Gets the guid of this RequestViewModel.  # noqa: E501


        :return: The guid of this RequestViewModel.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this RequestViewModel.


        :param guid: The guid of this RequestViewModel.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def request_type(self):
        """Gets the request_type of this RequestViewModel.  # noqa: E501


        :return: The request_type of this RequestViewModel.  # noqa: E501
        :rtype: int
        """
        return self._request_type

    @request_type.setter
    def request_type(self, request_type):
        """Sets the request_type of this RequestViewModel.


        :param request_type: The request_type of this RequestViewModel.  # noqa: E501
        :type: int
        """

        self._request_type = request_type

    @property
    def response_type(self):
        """Gets the response_type of this RequestViewModel.  # noqa: E501


        :return: The response_type of this RequestViewModel.  # noqa: E501
        :rtype: int
        """
        return self._response_type

    @response_type.setter
    def response_type(self, response_type):
        """Sets the response_type of this RequestViewModel.


        :param response_type: The response_type of this RequestViewModel.  # noqa: E501
        :type: int
        """

        self._response_type = response_type

    @property
    def endpoint(self):
        """Gets the endpoint of this RequestViewModel.  # noqa: E501


        :return: The endpoint of this RequestViewModel.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this RequestViewModel.


        :param endpoint: The endpoint of this RequestViewModel.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def name(self):
        """Gets the name of this RequestViewModel.  # noqa: E501


        :return: The name of this RequestViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RequestViewModel.


        :param name: The name of this RequestViewModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def delay(self):
        """Gets the delay of this RequestViewModel.  # noqa: E501


        :return: The delay of this RequestViewModel.  # noqa: E501
        :rtype: int
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this RequestViewModel.


        :param delay: The delay of this RequestViewModel.  # noqa: E501
        :type: int
        """

        self._delay = delay

    @property
    def failure_delay(self):
        """Gets the failure_delay of this RequestViewModel.  # noqa: E501


        :return: The failure_delay of this RequestViewModel.  # noqa: E501
        :rtype: int
        """
        return self._failure_delay

    @failure_delay.setter
    def failure_delay(self, failure_delay):
        """Sets the failure_delay of this RequestViewModel.


        :param failure_delay: The failure_delay of this RequestViewModel.  # noqa: E501
        :type: int
        """

        self._failure_delay = failure_delay

    @property
    def is_enabled(self):
        """Gets the is_enabled of this RequestViewModel.  # noqa: E501


        :return: The is_enabled of this RequestViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this RequestViewModel.


        :param is_enabled: The is_enabled of this RequestViewModel.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def components(self):
        """Gets the components of this RequestViewModel.  # noqa: E501


        :return: The components of this RequestViewModel.  # noqa: E501
        :rtype: list[ComponentViewModel]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this RequestViewModel.


        :param components: The components of this RequestViewModel.  # noqa: E501
        :type: list[ComponentViewModel]
        """

        self._components = components

    @property
    def items(self):
        """Gets the items of this RequestViewModel.  # noqa: E501


        :return: The items of this RequestViewModel.  # noqa: E501
        :rtype: list[ItemRequestViewModel]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this RequestViewModel.


        :param items: The items of this RequestViewModel.  # noqa: E501
        :type: list[ItemRequestViewModel]
        """

        self._items = items

    @property
    def properties(self):
        """Gets the properties of this RequestViewModel.  # noqa: E501


        :return: The properties of this RequestViewModel.  # noqa: E501
        :rtype: list[RequestPropertyViewModel]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this RequestViewModel.


        :param properties: The properties of this RequestViewModel.  # noqa: E501
        :type: list[RequestPropertyViewModel]
        """

        self._properties = properties

    @property
    def websocket_commands(self):
        """Gets the websocket_commands of this RequestViewModel.  # noqa: E501


        :return: The websocket_commands of this RequestViewModel.  # noqa: E501
        :rtype: list[WebsocketCommandViewModel]
        """
        return self._websocket_commands

    @websocket_commands.setter
    def websocket_commands(self, websocket_commands):
        """Sets the websocket_commands of this RequestViewModel.


        :param websocket_commands: The websocket_commands of this RequestViewModel.  # noqa: E501
        :type: list[WebsocketCommandViewModel]
        """

        self._websocket_commands = websocket_commands

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
