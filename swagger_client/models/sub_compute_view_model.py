# coding: utf-8

"""
    Nozomi API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubComputeViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parent_compute_guid': 'str',
        'parent_compute': 'ComputeViewModel',
        'child_compute_guid': 'str',
        'child_compute': 'ComputeViewModel',
        'is_enabled': 'bool'
    }

    attribute_map = {
        'parent_compute_guid': 'parentComputeGuid',
        'parent_compute': 'parentCompute',
        'child_compute_guid': 'childComputeGuid',
        'child_compute': 'childCompute',
        'is_enabled': 'isEnabled'
    }

    def __init__(self, parent_compute_guid=None, parent_compute=None, child_compute_guid=None, child_compute=None, is_enabled=None):  # noqa: E501
        """SubComputeViewModel - a model defined in Swagger"""  # noqa: E501
        self._parent_compute_guid = None
        self._parent_compute = None
        self._child_compute_guid = None
        self._child_compute = None
        self._is_enabled = None
        self.discriminator = None
        if parent_compute_guid is not None:
            self.parent_compute_guid = parent_compute_guid
        if parent_compute is not None:
            self.parent_compute = parent_compute
        if child_compute_guid is not None:
            self.child_compute_guid = child_compute_guid
        if child_compute is not None:
            self.child_compute = child_compute
        if is_enabled is not None:
            self.is_enabled = is_enabled

    @property
    def parent_compute_guid(self):
        """Gets the parent_compute_guid of this SubComputeViewModel.  # noqa: E501


        :return: The parent_compute_guid of this SubComputeViewModel.  # noqa: E501
        :rtype: str
        """
        return self._parent_compute_guid

    @parent_compute_guid.setter
    def parent_compute_guid(self, parent_compute_guid):
        """Sets the parent_compute_guid of this SubComputeViewModel.


        :param parent_compute_guid: The parent_compute_guid of this SubComputeViewModel.  # noqa: E501
        :type: str
        """

        self._parent_compute_guid = parent_compute_guid

    @property
    def parent_compute(self):
        """Gets the parent_compute of this SubComputeViewModel.  # noqa: E501


        :return: The parent_compute of this SubComputeViewModel.  # noqa: E501
        :rtype: ComputeViewModel
        """
        return self._parent_compute

    @parent_compute.setter
    def parent_compute(self, parent_compute):
        """Sets the parent_compute of this SubComputeViewModel.


        :param parent_compute: The parent_compute of this SubComputeViewModel.  # noqa: E501
        :type: ComputeViewModel
        """

        self._parent_compute = parent_compute

    @property
    def child_compute_guid(self):
        """Gets the child_compute_guid of this SubComputeViewModel.  # noqa: E501


        :return: The child_compute_guid of this SubComputeViewModel.  # noqa: E501
        :rtype: str
        """
        return self._child_compute_guid

    @child_compute_guid.setter
    def child_compute_guid(self, child_compute_guid):
        """Sets the child_compute_guid of this SubComputeViewModel.


        :param child_compute_guid: The child_compute_guid of this SubComputeViewModel.  # noqa: E501
        :type: str
        """

        self._child_compute_guid = child_compute_guid

    @property
    def child_compute(self):
        """Gets the child_compute of this SubComputeViewModel.  # noqa: E501


        :return: The child_compute of this SubComputeViewModel.  # noqa: E501
        :rtype: ComputeViewModel
        """
        return self._child_compute

    @child_compute.setter
    def child_compute(self, child_compute):
        """Sets the child_compute of this SubComputeViewModel.


        :param child_compute: The child_compute of this SubComputeViewModel.  # noqa: E501
        :type: ComputeViewModel
        """

        self._child_compute = child_compute

    @property
    def is_enabled(self):
        """Gets the is_enabled of this SubComputeViewModel.  # noqa: E501


        :return: The is_enabled of this SubComputeViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this SubComputeViewModel.


        :param is_enabled: The is_enabled of this SubComputeViewModel.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubComputeViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubComputeViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
