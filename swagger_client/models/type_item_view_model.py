# coding: utf-8

"""
    Nozomi API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TypeItemViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'item_guid': 'str',
        'item': 'ItemViewModel',
        'type_guid': 'str',
        'type': 'TypeViewModel'
    }

    attribute_map = {
        'guid': 'guid',
        'item_guid': 'itemGuid',
        'item': 'item',
        'type_guid': 'typeGuid',
        'type': 'type'
    }

    def __init__(self, guid=None, item_guid=None, item=None, type_guid=None, type=None):  # noqa: E501
        """TypeItemViewModel - a model defined in Swagger"""  # noqa: E501
        self._guid = None
        self._item_guid = None
        self._item = None
        self._type_guid = None
        self._type = None
        self.discriminator = None
        if guid is not None:
            self.guid = guid
        if item_guid is not None:
            self.item_guid = item_guid
        if item is not None:
            self.item = item
        if type_guid is not None:
            self.type_guid = type_guid
        if type is not None:
            self.type = type

    @property
    def guid(self):
        """Gets the guid of this TypeItemViewModel.  # noqa: E501


        :return: The guid of this TypeItemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this TypeItemViewModel.


        :param guid: The guid of this TypeItemViewModel.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def item_guid(self):
        """Gets the item_guid of this TypeItemViewModel.  # noqa: E501


        :return: The item_guid of this TypeItemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._item_guid

    @item_guid.setter
    def item_guid(self, item_guid):
        """Sets the item_guid of this TypeItemViewModel.


        :param item_guid: The item_guid of this TypeItemViewModel.  # noqa: E501
        :type: str
        """

        self._item_guid = item_guid

    @property
    def item(self):
        """Gets the item of this TypeItemViewModel.  # noqa: E501


        :return: The item of this TypeItemViewModel.  # noqa: E501
        :rtype: ItemViewModel
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this TypeItemViewModel.


        :param item: The item of this TypeItemViewModel.  # noqa: E501
        :type: ItemViewModel
        """

        self._item = item

    @property
    def type_guid(self):
        """Gets the type_guid of this TypeItemViewModel.  # noqa: E501


        :return: The type_guid of this TypeItemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._type_guid

    @type_guid.setter
    def type_guid(self, type_guid):
        """Sets the type_guid of this TypeItemViewModel.


        :param type_guid: The type_guid of this TypeItemViewModel.  # noqa: E501
        :type: str
        """

        self._type_guid = type_guid

    @property
    def type(self):
        """Gets the type of this TypeItemViewModel.  # noqa: E501


        :return: The type of this TypeItemViewModel.  # noqa: E501
        :rtype: TypeViewModel
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TypeItemViewModel.


        :param type: The type of this TypeItemViewModel.  # noqa: E501
        :type: TypeViewModel
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TypeItemViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypeItemViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
